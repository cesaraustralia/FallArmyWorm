---
title : GrowthMaps.jl example
author : Rafael Schouten, James Maino
---

# Growth rate calculation


In this example we will calculate the expected population growth rates of our species.

Use biological data from Early 2018
GBIF distribution data
Spread data from Early 2018

## Load some required packages

These packages take care of loading and plotting data, and handling sci units and dates.

```julia; results=hidden
using GrowthMaps, Plots, Unitful, UnitfulRecipes, Dates, Setfield, Statistics
using GeoData, ArchGDAL, NCDatasets, HDF5
using Unitful: °C, K, cal, mol
using CSV
basedir = @__DIR__
```


## Define model components

First we'll define the growth model using `SchoolfieldIntrinsicGrowth`, based on
Schoolfield (1981).

When defining model components, the first parameter is a `:symbol` for the
required raster layer in the source data.

```julia; results=hidden
p27 = 0.17
ΔH_A = 15588.0cal/mol
ΔH_H = 73744.0cal/mol
Thalf_H = 307.6K
ΔH_L = 73744.0cal/mol
Thalf_L = 500.0K
T_ref = K(27.0°C)

# Barfield 1978 (need to convert parameters using Schoolfield)
ΔH_A = 11822.57cal/mol
S_H = 295.08cal/mol/K
ΔH_H = 90678.50cal/mol
S_L = -19.59cal/mol/K
ΔH_L = -6603.414cal/mol
ψ_EA =12.254cal/K/mol
# R = 1.987cal/K/mol
# p = K(25.0°C)*exp((ψ_EA - ΔH_A/K(25.0°C))/R) # issues
# T_ref = K(25.0°C)
p27 = 0.75 # this is higher than 0.17 as inactivation in more in Barfield pars
T_ref = K(27.0°C)
Thalf_L = ΔH_L/S_L
Thalf_H = ΔH_H/S_H

growthmodel = SchoolfieldIntrinsicGrowth(p27, ΔH_A, ΔH_L, Thalf_L, ΔH_H, Thalf_H, T_ref)
growthresponse = Layer(:surface_temp, K, growthmodel)

GrowthMaps.rate(growthresponse, T_ref)
```

If these are only estimated parameters, We can fit the model to a a dataset of growth
rate and temperature. First extract our independent and dependent variables from the example CSV:

```julia; results=hidden
# using CSV, DataFrames, Tables
# mkpath(joinpath(basedir, "build"))
# obsdata = CSV.File(joinpath(basedir, "swd_ecophys_data.csv"), select=[:x_value, :y_value, :y_key]) |> DataFrame
# obsdata = filter(d -> d.y_key == "r_m", obsdata) |> dropmissing
```


Then extract the required data colummns, and convert temperature values from
unitless Celcius to explit Kelvins, using Unitful.jl:

```julia; results=hidden
# obsrate = obsdata.y_value
# obstemp = obsdata.x_value * °C .|> K
# obs = collect(zip(obstemp, obsrate))
```

Now plot the growth rate curve:

```julia; results=hidden
temprangeC = collect(1.0:1.0:40.0)°C
temprange = K.(temprangeC)
# GrowthMaps.rate.(Ref(growthresponse), temprange)
dev = (x -> GrowthMaps.rate(growthresponse, x)).(temprange)
p = plot(temprangeC, dev; label=false, ylabel="growth rate (1/d)", xlab = "temperature")
# scatter!(p, obs; label="observed ")
savefig(joinpath(basedir, "output/development_response.png"))
```

We can try tweaking the fitting the model manually in a user interface.
Model components are immutable (for performance reasons), so we wrap the model
in a mutable wraper so we can use the results.
We parametrise the model over the same temperature range that we are plotting,
using the :surface_temp key that the model requires:

```julia; results=hidden
wrapper = ModelWrapper(growthresponse)
tempdata=(surface_temp=temprange,)
interface = manualfit!(wrapper, tempdata) #; obs=obs)

# Make an electron window:
using Blink
w = Blink.Window()
body!(w, interface)
```


If you are happy with the result, you we can update extract the manual fit
to use to generate our growth rate maps:

```julia; results=hidden
# fittedgrowth = wrapper.model
```

Note that `manualfit!` will also work for a tuple of model components
that use the same source data, like `(growth, heatstress, coldstress)`.


## Load spatial data

Using the monthly aggregated SMAP dataset

```julia; results=hidden
#smap_folder = "/home/raf/Data/SMAP/SMAP_L4_SM_gph_v4"
# smap_folder = "/home/raf/Work/cesar/Data/SMAP"
# smap_folder = "F:/SMAP/SMAP_monthly_midpoint_subset"
smap_folder = "F:/SMAP/SMAP_L4_SM_gph_v4"
smapfiles = joinpath.(smap_folder, [f for f in readdir(smap_folder) if occursin(r".h5$", f) && occursin("_2018" , f)])
smapfiles = smapfiles[match.(r"01T|08T|16T|24T", smapfiles) .!= nothing]
series = SMAPseries(smapfiles)
# series = seriesall[Where(t -> dayofmonth(t) in days)]
# series = series[Where(t -> year(t) in 2017)]
```

Otherwise get the series from tiff files, which is a little more hands-on:

```julia; results=hidden
# unzippedfolder = "/home/raf/Work/cesar/Raster/SMAP/SMAP_aggregated27km"
# filenames = readdir(unzippedfolder)
# wilting_paths =
#     joinpath.(Ref(unzippedfolder), filter(fn -> occursin(r"land_fraction_wilting", fn), filenames))
# surface_temp_paths =
#     joinpath.(Ref(unzippedfolder), filter(fn -> occursin(r"surface_temp", fn), filenames))
#
# # Get the dates covered in the data from the `surface_temp` files list, using regex:
# df = DateFormat("yyyymmddTHHMMSS")
# dates = DateTime.(replace.(surface_temp_paths, Ref(r".*_(\d+T\d+).tif" => s"\1")), Ref(df))
#
# #= We know the "land_fraction_wilting" files are for the same dates.
# Now we have the files and date seies, we can put together
# a series of GeoData.jl stacks to load from disk while generating growth maps
# The beauty of this approach is that we can use a lot of different source file types and
# folder configurations without converting them or running out of RAM.
# =#
# makestack(i) =
#  GDALstack((land_fraction_wilting=wilting_paths[i], surface_temp=surface_temp_paths[i]);
#            window=(Band(1),), usercrs=EPSG(4326))
# timedim = Ti(dates; mode=Sampled(Ordered(), Regular(Hour(3)), Intervals(Start())))
# stacks = [makestack(i) for i in 1:length(surface_temp_paths)]
# series = GeoSeries(stacks, (timedim,))
```

We can plot a layer from a file at some date in the series:

```julia; results=hidden
series[2][:surface_temp] |> plot
```

# Parametrising models using interactive maps

To find parameter values that satisfactorily explain the distribution we must
first aggregate the spatial data to a more manageable size so that spatial
predictions are more responsive to parameter adjustments.

```julia; results=hidden
agg = 10
aggseries = GeoData.aggregate(Center(), series, (Lon(agg), Lat(agg)), (:land_fraction_wilting, :surface_temp))
p = first(aggseries[1]) |> plot
```

You can experiment with the `agg` size to compromise between quality and render time.
Larger values will look pixelated but will run faster.

First we'll run this basic growth model, calculating the daily growth rate across the year:

```julia; results=hidden
growthrates = mapgrowth(growthresponse;
    series=aggseries,
    tspan=DateTime(2017, 1):Year(1):DateTime(2017, 12)
)
plot(growthrates[Ti(1)], clim=(0, 0.15))
```

As the population growth response is only based on temperature, the annual
growth rate is estimated to be positive even in stressful dry environements t
hat have low moisture availability. These prediction can be impoved by
incorporating population mortality under acute stress. Now define some stressors:

```julia; results=hidden
coldthresh = 13.0°C |> K
coldmort = -0.2 * K^-1
coldstress = Layer(:surface_temp, K, ColdStress(coldthresh, coldmort))

heatthresh = 40.0°C |> K
heatmort = -0.02 * K^-1
heatstress = Layer(:surface_temp, K, HeatStress(heatthresh, heatmort))

wiltthresh = .5
wiltmort = -0.2
wiltstress = Layer(:land_fraction_wilting, WiltStress(wiltthresh, wiltmort));
```
check that yeme can be fit
```julia; results=hidden
yemen = Lon(Between(-30.0, 55.0)), Lat(Between(-30, 20))
stress = mapgrowth(growthresponse, coldstress, wiltstress, heatstress;
    series=aggseries,
    tspan=DateTime(2018, 1):Year(1):DateTime(2018, 12)
)
plot(mean(stress[yemen...], dims=Ti), clim=(0, 0.15))
```

To build a more complex model, we can chain components together in a tuple,
and run them:

```julia; results=hidden
tspan = DateTime(2018, 1):Year(1):DateTime(2018, 12)
length(tspan)
annualgrowthrates = mapgrowth((growthresponse, wiltstress, heatstress, coldstress);
    series=aggseries,
    tspan=tspan,
)
plot(annualgrowthrates[Ti(1)], clim=(0, 0.15))
```
We can also get monthly growth rates for a spatial subsection defined by longitude and latitudes:

```julia; results=hidden
tspan = DateTime(2017):Month(1):DateTime(2017, 12)
length(tspan)
monthlygrowthrates = mapgrowth((growthresponse, wiltstress, heatstress, coldstress);
    series=aggseries, tspan=tspan,
)
aust = Lon(Between(113, 153)), Lat(Between(-43, -11))
plot(monthlygrowthrates[Ti(1:3:12), aust...], clim=(0, 0.15))
```
We can also take the mean of these monthly layers and plot them:

```julia; results=hidden
plot(mean(monthlygrowthrates, dims=Ti), clim=(0, 0.15))
```

This looks similar to the previous yearly simulation and, indeed,
is equivalent due to the additive nature of exponents (e.g. exp(a) * exp(b) = exp(a + b)):

```julia; results=hidden
growthdiff = annualgrowthrates[Ti(1)] .- mean(monthlygrowthrates, dims=Ti)[1]
sum(map(x -> isnan(x) ? zero(x) : x, growthdiff))
tspan = DateTime(2017):Month(1):DateTime(2017, 12)
length(tspan)
growthrates = mapgrowth((growthresponse, heatstress, coldstress, wiltstress);
    series=aggseries, tspan=tspan,
)
plot(growthrates[Ti(1)], clims=(0.0, 0.15), axis=false)
```

## Compare with observation data

To compare out simulation with observations data, we'll load them
from a CSV file:

```julia; results=hidden
csvfilename = joinpath(basedir, "data/wang2020.csv")
obs = CSV.File(csvfilename)
occurrence = collect(zip(obs.longitude, obs.latitude))
```

And scatter them on the growthrates map:

```julia; results=hidden
p = plot(mean(growthrates, dims=Ti), clims=(0, 0.15))
scatter!(p, occurrence;markersize=2.0, markercolor=:cyan, markershape=:cross, label=false)
display(p)
savefig(joinpath(basedir, "output/population_occurrence.png"))
```
Load monthly distibution data and plot.

```julia; results=hiddeats
northam = Lon(Between(-125.0, -30)), Lat(Between(-50, 50))
monthlyocc = CSV.File("data/americas_monthly.csv")
xs = Vector(monthlyocc.longitude)
ys = Vector(monthlyocc.latitude)
months = Vector(monthlyocc.month)

p = plot(monthlygrowthrates[Ti(1:12), northam...]; size=(1500, 1000), clims=(0, 0.15));
for m in unique(months)
    mx = xs[months .== m]
    my = ys[months .== m]
    scatter!(p[m], mx, my, markersize=2.0, markercolor=:cyan, markershape=:cross, label=false)
end
display(p)
savefig("output/population_occurrence_monthly.png")
```

Fit a model across the whole year to see where population growth is on average positive across the year.

```julia; results=hidden
growthrates = mapgrowth((growthresponse, coldstress, heatstress, wiltstress);
    series=aggseries,
    tspan = DateTime(2017):Year(1):DateTime(2017, 12)
)
p = plot(growthrates[Ti(1)], clims=(0.0, 0.15))
scatter!(p, occurrence;
    markersize=2.0,
    markercolor=:cyan,
    markershape=:cross,
    markeropacity=0.5,
    label="obs",
)
```

We can also look at seasons:
```julia; results=hidden
growthrates = mapgrowth((growthresponse, coldstress, wiltstress);
    series=aggseries,
    tspan=DateTime(2017):Month(1):DateTime(2017, 12),
)
p = plot(growthrates[Ti([1,4,7,10])], clims=(0.0, 0.15), axis=false)
```

As the combination of model is additive, we can prebuild parts of the model
we don't want to fit manually, which simplifies the interfaces and helps performance.
Seeing we allready fit the growth response to empiracle data, lets just fit
the stress responses to the map:

```julia; results=hidden
modelkwargs = (
    series=aggseries,
    tspan=DateTime(2017):Year(1):DateTime(2017, 12),
)
precomputed = mapgrowth(growthresponse; modelkwargs...)
```

Then fit the other components. `throttle` will dictate how fast the interface updates. Make it larger on a slow machine,
smaller on a faster one.

```julia; results=hidden
usa = Lon(Between(-125.0, -66.96)), Lat(Between(20.0, 50))

wrapper = ModelWrapper(wiltstress, coldstress, heatstress)
throttle = 0.2
interface = mapfit!(wrapper, modelkwargs;
    window=(Ti(1), aust...),
    # occurrence=occurrence,
    precomputed=precomputed,
    throttle=throttle,
    markersize=1.0,
    markershape=:cross,
    markercolor=:cyan,
    markeropacity=0.4
)
# Make an electron window:
using Blink
w = Blink.Window()
body!(w, interface)
```

And get the updated model components from the wrapper:

```julia; results=hidden
wiltstress, coldstress, heatstress = wrapper.model
```

Now we will put together decent population growth maps for use in other simulations using the higher resolution data, with a monthly timestep:

Fit a model across the whole year to see where population growth is on average positive across the year.

```julia; results=hidden
growthrates = mapgrowth((growthresponse, wiltstress, coldstress, heatstress),
    series=series,
    tspan=DateTime(2018, 1):Month(1):DateTime(2018, 12)
);
```

This is ready to use for estimating establishment potential, or in a dispersal
simulation using Dispersal.jl. Let's save it as a NetCDF file:

```julia; results=hidden
growthratesfilepath = joinpath(basedir, "data/growthrates.ncd")
write(growthratesfilepath, NCDarray, growthrates)
```
